plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'androidx.navigation.safeargs'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'com.google.gms.google-services'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.example.kbbikamusbesarbahasaindonesia"
        minSdk 21
        targetSdk 32

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    def packageName = "com.example.kbbikamusbesarbahasaindonesia"
    def appAliasName = "KBBI"
    def versionPropertiesFile = file('version.properties')

    if(versionPropertiesFile.canRead()) {
        Properties versionProperties = new Properties()

        versionProperties.load(new FileInputStream(versionPropertiesFile))
        def runTasks = gradle.startParameter.taskNames

        if (runTasks.grep(':app:assembleRelease')) {
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    output.outputFile = new File(
                            output.outputFile.parent,
                            output.outputFile.name.replace(".apk", "-${variant.versionName}.apk"))
                }
            }

        }

        def versionMajor = versionProperties['VERSION_MAJOR'].toInteger()
        def versionMinor = versionProperties['VERSION_MINOR'].toInteger()
        def versionMaintenance = versionProperties['VERSION_MAINTENANCE'].toInteger()
        // def version_build = versionProps['VERSION_BUILD'].toInteger() + 1
        def versionDev = versionProperties['VERSION_DEV'].toInteger()
        def versionBeta = versionProperties['VERSION_BETA'].toInteger()
        def versionAlpha = versionProperties['VERSION_ALPHA'].toInteger()
        def versionCode = versionProperties['VERSION_CODE'].toInteger()

        versionProperties['VERSION_MAJOR'] = versionMajor.toString()
        versionProperties['VERSION_MINOR'] = versionMinor.toString()
        versionProperties['VERSION_MAINTENANCE'] = versionMaintenance.toString()
        versionProperties['VERSION_DEV'] = versionDev.toString()
        versionProperties['VERSION_BETA'] = versionBeta.toString()
        versionProperties['VERSION_ALPHA'] = versionAlpha.toString()
        versionProperties['VERSION_CODE'] = versionCode.toString()

        versionProperties.store(versionPropertiesFile.newWriter(), null)

        flavorDimensions("stage")
        productFlavors {
            development {
                applicationId packageName + ".dev"
                dimension "stage"

                if(versionDev == 0) {
                    versionName "${versionMajor}.${versionMinor}.${versionMaintenance}-dev"
                    resValue "string", "version_name", "${versionMajor}.${versionMinor}.${versionMaintenance}-dev"
                } else {
                    versionName "${versionMajor}.${versionMinor}.${versionMaintenance}-dev.${versionDev}"
                    resValue "string", "version_name", "${versionMajor}.${versionMinor}.${versionMaintenance}-dev.${versionDev}"
                }

                resValue "string", "version_code", "${versionCode}"
                resValue "string", "package_name", "${packageName}"
                def makeAConstant = { constantName, constantValue ->
                    manifestPlaceholders += [(constantName): constantValue]
                    buildConfigField "String", "${constantName}", "\"${constantValue}\""
                }
                resValue "string", "app_name", "Dev " + appAliasName
                makeAConstant("application_name", "Dev " + appAliasName)
            }

            production {
                applicationId packageName
                dimension = "stage"
                resValue "string", "version_code", "${versionCode}"
                if(versionMaintenance == 0){
                    versionName "${versionMajor}.${versionMinor}"
                    resValue "string", "version_name", "${versionMajor}.${versionMinor}"
                } else {
                    versionName "${versionMajor}.${versionMinor}.${versionMaintenace}"
                    resValue "string", "version_name", "${versionMajor}.${versionMinor}.${versionMaintenace}"
                }
                resValue "string", "package_name", "${packageName}"


                def makeAConstant = { constantName, constantValue ->
                    manifestPlaceholders += [(constantName): constantValue]
                    buildConfigField "String", "${constantName}", "\"${constantValue}\""
                }
                resValue "string", "app_name", appAliasName
                makeAConstant("application_name", appAliasName)
            }
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    signingConfigs {
        release {
            storeFile file('../kbbi_keystore')
            storePassword 'kbbi123'
            keyAlias 'kbbi_key'
            keyPassword 'kbbi123'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true
        }
        release {
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.2.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // Lottie
    implementation 'com.airbnb.android:lottie:5.0.3'

    //Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:2.4.1"
    implementation "androidx.navigation:navigation-ui-ktx:2.4.1"

    //dagger hilt
    implementation 'com.google.dagger:hilt-android:2.41'
    kapt 'com.google.dagger:hilt-compiler:2.41'
    implementation 'androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03'
    kapt "androidx.hilt:hilt-compiler:1.0.0"

    //room
    implementation "androidx.room:room-runtime:2.4.2"
    kapt "androidx.room:room-compiler:2.4.2"
    implementation "androidx.room:room-ktx:2.4.2"

    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'


    //okhttp
    implementation "com.squareup.okhttp3:okhttp:4.9.3"
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.3"

    //coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2"

    //view model Lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.4.1"

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:31.0.2')

}